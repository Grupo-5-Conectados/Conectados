// Configuraci√≥n de Jenkins para integraci√≥n con Slack
// Este archivo debe ser ejecutado en Jenkins Script Console o como Job DSL

// Configurar notificaci√≥n de Slack
node {
    // Configuraci√≥n del canal de Slack
    def slackChannel = '#conectados'
    def slackToken = 'YOUR_SLACK_TOKEN' // Reemplazar con token real
    
    // Funci√≥n para enviar notificaci√≥n a Slack
    def sendSlackNotification(String message, String color = 'good') {
        try {
            slackSend(
                channel: slackChannel,
                color: color,
                message: message,
                tokenCredentialId: 'slack-token' // Credencial configurada en Jenkins
            )
        } catch (Exception e) {
            echo "Error enviando notificaci√≥n a Slack: ${e.message}"
        }
    }
    
    // Notificaci√≥n de inicio de pipeline
    sendSlackNotification('üöÄ Pipeline iniciado - Ejecutando pruebas Selenium')
    
    // Ejecutar pipeline
    try {
        // Aqu√≠ ir√≠a la l√≥gica del pipeline
        echo 'Pipeline ejecut√°ndose...'
        
        // Notificaci√≥n de √©xito
        sendSlackNotification('‚úÖ Pipeline completado exitosamente - Pruebas Selenium pasaron')
        
    } catch (Exception e) {
        // Notificaci√≥n de fallo
        sendSlackNotification('‚ùå Pipeline fall√≥ - Revisar pruebas Selenium', 'danger')
        throw e
    }
}

// Configuraci√≥n adicional para Jenkins
// Agregar al Jenkinsfile si se usa Job DSL

/*
pipeline {
    agent any
    
    environment {
        SLACK_CHANNEL = '#conectados'
    }
    
    stages {
        // ... stages existentes ...
    }
    
    post {
        success {
            script {
                // Notificaci√≥n de √©xito con detalles
                def message = """
                ‚úÖ Pipeline Conectados - √âXITO
                üìä Pruebas Selenium: ${env.BUILD_NUMBER}
                ‚è±Ô∏è Duraci√≥n: ${currentBuild.durationString}
                üîó Build: ${env.BUILD_URL}
                """
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'good',
                    message: message
                )
            }
        }
        
        failure {
            script {
                // Notificaci√≥n de fallo con detalles
                def message = """
                ‚ùå Pipeline Conectados - FALLO
                üìä Pruebas Selenium: ${env.BUILD_NUMBER}
                ‚è±Ô∏è Duraci√≥n: ${currentBuild.durationString}
                üîó Build: ${env.BUILD_URL}
                üìã Logs: ${env.BUILD_URL}console
                """
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'danger',
                    message: message
                )
            }
        }
        
        unstable {
            script {
                // Notificaci√≥n de inestable
                def message = """
                ‚ö†Ô∏è Pipeline Conectados - INESTABLE
                üìä Pruebas Selenium: ${env.BUILD_NUMBER}
                ‚è±Ô∏è Duraci√≥n: ${currentBuild.durationString}
                üîó Build: ${env.BUILD_URL}
                """
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: 'warning',
                    message: message
                )
            }
        }
    }
}
*/

// Instrucciones para configurar Slack en Jenkins:
/*
1. Instalar plugin "Slack Notification" en Jenkins
2. Configurar credenciales de Slack:
   - Ir a Jenkins > Manage Jenkins > Credentials
   - Agregar credencial de tipo "Secret text"
   - ID: slack-token
   - Secret: [Tu token de Slack]

3. Configurar notificaciones globales:
   - Ir a Jenkins > Manage Jenkins > Configure System
   - Buscar secci√≥n "Slack"
   - Workspace: [Tu workspace de Slack]
   - Credential: slack-token

4. Configurar canal por defecto:
   - Default channel: #conectados
   - Team domain: [Tu dominio de Slack]

5. Probar configuraci√≥n:
   - Usar bot√≥n "Test Connection"
   - Verificar que llegue mensaje de prueba
*/ 